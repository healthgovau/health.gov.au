<<<<<<< HEAD
!function(e,l,a,o){"use strict";l.health=l.health||{},l.health.mobileNav={},l.behaviors.healthMobileNav={attach:function(a,o){e(".mobile-toggle.mobile-toggle--main-menu",a).healthAccordion({speed:500,beforeOpen:function(){l.health.mobileNav.enableOverlay(),l.health.mobileNav.handleNavTabbing("search"),l.health.mobileNav.toggleText(e(this)[0].this,"menu")},beforeClose:function(){l.health.mobileNav.disableOverlay(),l.health.mobileNav.toggleText(e(this)[0].this,"menu")},afterClose:function(){l.health.mobileNav.disableOverlay(!0)}}),e(".mobile-toggle.mobile-toggle--search",a).healthAccordion({speed:300,beforeOpen:function(){l.health.mobileNav.enableOverlay(),l.health.mobileNav.handleNavTabbing("main-menu"),l.health.mobileNav.toggleText(e(this)[0].this,"search")},beforeClose:function(){l.health.mobileNav.disableOverlay(),l.health.mobileNav.toggleText(e(this)[0].this,"search")},afterClose:function(){l.health.mobileNav.disableOverlay(!0)}}),e(".nav-overlay",a).click(function(){e(".mobile-toggle.mobile-toggle--main-menu",a).hasClass("health-accordion--open")&&e(".mobile-toggle.mobile-toggle--main-menu",a).trigger("click"),e(".mobile-toggle.mobile-toggle--search",a).hasClass("health-accordion--open")&&e(".mobile-toggle.mobile-toggle--search",a).trigger("click")}),e(".filter__mobile-title",a).click(function(l){e(this).toggleClass("expanded"),e(".block-facetapi",a).toggleClass("facetshow")}),e(".filter-topics-by-letter__mobile-title",a).click(function(l){e(this).toggleClass("expanded"),e(".filter-topics-by-letter",a).toggleClass("facetshow")}),e(".region-navigation #search-api-page-search-form").attr("id","search-api-page-search-form-mobile"),l.health.mobileNav.enableOverlay=function(){e(".nav-overlay",a).addClass("transition").addClass("active")},l.health.mobileNav.disableOverlay=function(l){e(".mobile-toggle--search",a).hasClass("health-accordion--open")||e(".mobile-toggle--main-menu",a).hasClass("health-accordion--open")||(!0===l?e(".nav-overlay",a).removeClass("transition"):e(".nav-overlay",a).removeClass("active"))},l.health.mobileNav.toggleText=function(e,l){e.find("span").text().trim()==="Open "+l?e.find("span").text("Close "+l):e.find("span").text("Open "+l)},l.health.mobileNav.handleNavTabbing=function(l){e(".mobile-toggle.mobile-toggle--"+l,a).hasClass("health-accordion--open")&&e(".mobile-toggle.mobile-toggle--"+l,a).trigger("click")}}}}(jQuery,Drupal,0,this.document);
=======
(function ($, Drupal, window, document) {

  'use strict';

  Drupal.behaviors.healthMobileMenu = {
    attach: function (context, settings) {

      // Main menu navigation toggle.
      $('.mobile-toggle.mobile-toggle--main-menu', context).click(function (e) {
        Drupal.toggleText($(this), 'menu');
        AU.accordion.Toggle($(this)[0], 400,
          {
            onOpen: function () {
              Drupal.handleNavTabbing('search');
              Drupal.enableOverlay();
            },
            afterOpen: function () {
            },
            onClose: function () {
              Drupal.disableOverlay(false);
            },
            afterClose: function () {
              Drupal.disableOverlay(true);
            }
          }
        );
      });

      // Global search toggle.
      $('.mobile-toggle.mobile-toggle--search', context).click(function (e) {
        Drupal.toggleText($(this), 'search');
        AU.accordion.Toggle($(this)[0], 200,
          {
            onOpen: function () {
              Drupal.handleNavTabbing('main-menu');
              Drupal.enableOverlay();
            },
            afterOpen: function () {
            },
            onClose: function () {
              Drupal.disableOverlay(false);
            },
            afterClose: function () {
              Drupal.disableOverlay(true);
            }
          }
        );
      });

      // Clicking outside the active site nav should close the nav.
      $('.nav-overlay', context).click(function () {
        // Deactivate nav if it is currently active.
        if ($('.mobile-toggle.mobile-toggle--main-menu', context).hasClass('au-accordion--open')) {
          $('.mobile-toggle.mobile-toggle--main-menu', context).trigger('click');
        }
        // Deactivate search if it is currently active.
        if ($('.mobile-toggle.mobile-toggle--search', context).hasClass('au-accordion--open')) {
          $('.mobile-toggle.mobile-toggle--search', context).trigger('click');
        }
      });

      // Local navigation
      $('.mobile-toggle.mobile-toggle__local-nav a', context).click(function (e) {
        e.preventDefault();
        $("#block-menu-block-2 .menu-block-wrapper", context).toggleClass('mobilemenu-active');
        $(".mobile-toggle.mobile-toggle__local-nav", context).toggleClass('mobilemenu-active');
      });

      $('.filter__mobile-title', context).click(function (e) {
        $(this).toggleClass('expanded');
        $('.block-facetapi', context).toggleClass('facetshow');
      });

      $('.filter-topics-by-letter__mobile-title', context).click(function (e) {
        $(this).toggleClass('expanded');
        $('.filter-topics-by-letter', context).toggleClass('facetshow');
      });

      // Because we are outputting 2 search forms, one for desktop and one for mobile.
      // It uses the same ID, which causes an accessibility issue.
      // So update the ID of the mobile one so it is different.
      $('.region-navigation #search-api-page-search-form').attr('id', 'search-api-page-search-form-mobile');

      /**
       * Enable the overlay.
       */
      Drupal.enableOverlay = function() {
        $('.nav-overlay', context).addClass('transition').addClass('active');
      };

      /**
       * Disable the overlay only if no tabs are currently active.
       * Supports switching between tabs without the overlay disappearing.
       *
       * @param bool complete
       *   Is this the start of end of the animation / transition.
       *
       */
      Drupal.disableOverlay = function(complete) {
        if (complete === false) {
          $('.nav-overlay', context).removeClass('active');
        } else if (!$('.mobile-toggle--search', context).hasClass('au-accordion--open') && !$('.mobile-toggle--main-menu', context).hasClass('au-accordion--open')) {
          $('.nav-overlay', context).removeClass('transition');
        }
      };

      /**
       * Swap text from Open to Close.
       * @param $element
       *   The element to change the text.
       * @param text
       *   The name of the button, eg search, menu etc to suffix to Open/Close
       */
      Drupal.toggleText = function ($element, text) {
        // Update text.
        if ($element.find('span').text().trim() === 'Open ' + text) {
          $element.find('span').text('Close ' + text);
        } else {
          $element.find('span').text('Open ' + text);
        }
      };

      /**
       * Handle when a tab is already active and other tab is clicked.
       * @param otherTab
       *   The name of the other tab, eg search, main-menu
       */
      Drupal.handleNavTabbing = function(otherTab) {
        if ($('.mobile-toggle.mobile-toggle--' + otherTab, context).hasClass('au-accordion--open')) {
          $('.mobile-toggle.mobile-toggle--' + otherTab, context)
            .trigger('click');
        }
      };
    }
  };


})(jQuery, Drupal, this, this.document);
>>>>>>> Compile css and js
